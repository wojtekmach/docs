searchNodes=[{"doc":"","ref":"Formats.html","title":"Formats","type":"module"},{"doc":"Decodes data according to the format.Examplesiex&gt; Formats.decode!(&quot;{\\&quot;x\\&quot;:1,\\&quot;y\\&quot;:2}&quot;, :json) %{&quot;x&quot; =&gt; 1, &quot;y&quot; =&gt; 2}","ref":"Formats.html#decode!/2","title":"Formats.decode!/2","type":"function"},{"doc":"Decodes gzip data.See also encode_gzip_to_iodata/1 for encoding.","ref":"Formats.html#decode_gzip/1","title":"Formats.decode_gzip/1","type":"function"},{"doc":"Decodes Sitemap data.See also encode_sitemap_to_iodata/1 for encoding.","ref":"Formats.html#decode_sitemap/1","title":"Formats.decode_sitemap/1","type":"function"},{"doc":"Decodes XML data.See also encode_xml_to_iodata/1 for encoding.Examplesiex&gt; data = ~s{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;points&gt;&lt;point x=&quot;1&quot; y=&quot;2&quot;/&gt;&lt;point x=&quot;3&quot; y=&quot;4&quot;/&gt;&lt;/points&gt;} iex&gt; Formats.decode!(data, :xml) {&quot;points&quot;, [ {&quot;point&quot;, %{&quot;x&quot; =&gt; &quot;1&quot;, &quot;y&quot; =&gt; &quot;2&quot;}, []}, {&quot;point&quot;, %{&quot;x&quot; =&gt; &quot;3&quot;, &quot;y&quot; =&gt; &quot;4&quot;}, []} ]}","ref":"Formats.html#decode_xml/1","title":"Formats.decode_xml/1","type":"function"},{"doc":"Returns a decoder for the given format.Examplesiex&gt; Formats.decoder(:gzip) &amp;Formats.decode_gzip/1 iex&gt; Formats.decoder(:json) &amp;Jason.decode/1","ref":"Formats.html#decoder/1","title":"Formats.decoder/1","type":"function"},{"doc":"Encodes data according to the format.Examplesiex&gt; Formats.encode!(%{&quot;x&quot; =&gt; 1, &quot;y&quot; =&gt; 2}, :json) &quot;{\\&quot;x\\&quot;:1,\\&quot;y\\&quot;:2}&quot;","ref":"Formats.html#encode!/2","title":"Formats.encode!/2","type":"function"},{"doc":"Encodes gzip data.See also decode_gzip/1 for decoding.","ref":"Formats.html#encode_gzip_to_iodata/1","title":"Formats.encode_gzip_to_iodata/1","type":"function"},{"doc":"Encodes Sitemap data.See also decode_sitemap/1 for decoding.","ref":"Formats.html#encode_sitemap_to_iodata/1","title":"Formats.encode_sitemap_to_iodata/1","type":"function"},{"doc":"Encodes XML data.See also decode_xml/1 for decoding.Examplesiex&gt; data = ...&gt; {&quot;points&quot;, ...&gt; [ ...&gt; {&quot;point&quot;, %{&quot;x&quot; =&gt; &quot;1&quot;, &quot;y&quot; =&gt; &quot;2&quot;}, []}, ...&gt; {&quot;point&quot;, %{&quot;x&quot; =&gt; &quot;3&quot;, &quot;y&quot; =&gt; &quot;4&quot;}, []} ...&gt; ]} iex&gt; Formats.encode!(data, :xml) ~s{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;points&gt;&lt;point x=&quot;1&quot; y=&quot;2&quot;/&gt;&lt;point x=&quot;3&quot; y=&quot;4&quot;/&gt;&lt;/points&gt;}","ref":"Formats.html#encode_xml_to_iodata/1","title":"Formats.encode_xml_to_iodata/1","type":"function"},{"doc":"Returns an encoder for the given format.Examplesiex&gt; Formats.encoder(:gzip) &amp;Formats.encode_gzip_to_iodata/1 iex&gt; Formats.encoder(:json) &amp;Jason.encode_to_iodata/1","ref":"Formats.html#encoder/1","title":"Formats.encoder/1","type":"function"},{"doc":"Detects a format based on MIME type or filename.Options:mime:filenameExamplesiex&gt; Formats.format(mime: &quot;application/x-gzip&quot;) :gzip iex&gt; Formats.format(mime: &quot;application/vnd.acme+json&quot;) :json iex&gt; Formats.format(filename: &quot;test.json&quot;) :json iex&gt; Formats.format(filename: &quot;bad&quot;) nil","ref":"Formats.html#format/1","title":"Formats.format/1","type":"function"}]