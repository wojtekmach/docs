searchNodes=[{"doc":"A time-based poller to periodically dispatch Telemetry events. A poller is a process start in your supervision tree with a list of measurements to perform periodically. On start it expects the period in milliseconds and a list of measurements to perform: telemetry_poller : start_link ( [ { measurements , Measurements } , { period , Period } ] ) The following measurements are supported: * memory (default) * total_run_queue_lengths (default) * system_counts (default) * {process_info, Proplist} * {Module, Function, Args} We will discuss each measurement in detail. Also note that the telemetry_poller application ships with a built-in poller that measures memory , total_run_queue_lengths and system_counts . This takes the VM measurement out of the way so your application can focus on what is specific to its behaviour. Memory An event emitted as [vm, memory] . The measurement includes all the key-value pairs returned by erlang:memory/0 function, e.g. total for total memory, processes_used for memory used by all processes, etc. Total run queue lengths On startup, the Erlang VM starts many schedulers to do both IO and CPU work. If a process needs to do some work or wait on IO, it is allocated to the appropriate scheduler. The run queue is a queue of tasks to be scheduled. A length of a run queue corresponds to the amount of work accumulated in the system. If a run queue length is constantly growing, it means that the BEAM is not keeping up with executing all the tasks. There are several run queue types in the Erlang VM. Each CPU scheduler (usually one per core) has its own run queue, and since Erlang 20.0 there is one dirty CPU run queue, and one dirty IO run queue. The run queue length event is emitted as [vm, total_run_queue_lengths] . The event contains no metadata and three measurements: total - a sum of all run queue lengths cpu - a sum of CPU schedulers' run queue lengths, including dirty CPU run queue length on Erlang version 20 and greater io - length of dirty IO run queue. It's always 0 if running on Erlang versions prior to 20. Note that the method of making this measurement varies between different Erlang versions: the implementation on versions earlier than Erlang/OTP 20 is less efficient. The length of all queues is not gathered atomically, so the event value does not represent a consistent snapshot of the run queues' state. However, the value is accurate enough to help to identify issues in a running system. System counts An event emitted as [vm, system_counts] . The event contains no metadata and three measurements: process_count - number of process currently existing at the local node atom_count - number of atoms currently existing at the local node port_count - number of ports currently existing at the local node All three measurements are from erlang:system_info/1 . Process info A measurement with information about a given process. It must be specified alongside a proplist with the process name, the event name, and a list of keys to be included: { process_info , [ { name , my_app_worker } , { event , [ my_app , worker ] } , { keys , [ message_queue_len , memory ] } ] } The keys is a list of atoms accepted by erlang:process_info/2 . Custom measurements Telemetry poller also allows you to perform custom measurements by passing a module-function-args tuple: { my_app_example , measure , [ ] } The given function will be invoked periodically and they must explicitly invoke telemetry:execute/3 function. If the invocation of the MFA fails, the measurement is removed from the Poller. For all options, see start_link/1 . The options listed there can be given to the default poller as well as to custom pollers. Default poller A default poller is started with telemetry_poller responsible for emitting measurements for memory and total_run_queue_lengths . You can customize the behaviour of the default poller by setting the default key under the telemetry_poller application environment. Setting it to false disables the poller. Example - tracking number of active sessions in web application Let's imagine that you have a web application and you would like to periodically measure number of active user sessions. - module ( example_app ) . session_count ( ) -&gt; % logic for calculating session count. To achieve that, we need a measurement dispatching the value we're interested in: - module ( example_app_measurements ) . dispatch_session_count ( ) -&gt; telemetry : execute ( [ example_app , session_count ] , example_app : session_count ( ) ) . and tell the Poller to invoke it periodically: telemetry_poller : start_link ( [ { measurements , [ { example_app_measurements , dispatch_session_count , [ ] } ] ) . If you find that you need to somehow label the event values, e.g. differentiate between number of sessions of regular and admin users, you could use event metadata: - module ( example_app_measurements ) . dispatch_session_count ( ) -&gt; Regulars = example_app : regular_users_session_count ( ) , Admins = example_app : admin_users_session_count ( ) , telemetry : execute ( [ example_app , session_count ] , \#{ count =&gt; Admins } , \#{ role =&gt; admin } ) , telemetry : execute ( [ example_app , session_count ] , \#{ count =&gt; Regulars } , \#{ role =&gt; regular } ) . Note: the other solution would be to dispatch two different events by hooking up example_app:regular_users_session_count/0 and example_app:admin_users_session_count/0 functions directly. However, if you add more and more user roles to your app, you'll find yourself creating a new event for each one of them, which will force you to modify existing event handlers. If you can break down event value by some feature, like user role in this example, it's usually better to use event metadata than add new events. This is a perfect use case for poller, because you don't need to write a dedicated process which would call these functions periodically. Additionally, if you find that you need to collect more statistics like this in the future, you can easily hook them up to the same poller process and avoid creating lots of processes which would stay idle most of the time.","ref":"telemetry_poller.html","title":"telemetry_poller","type":"module"},{"doc":"Returns a child spec for the poller for running under a supervisor.","ref":"telemetry_poller.html#child_spec/1","title":"telemetry_poller.child_spec/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#code_change/3","title":"telemetry_poller.code_change/3","type":"function"},{"doc":"","ref":"telemetry_poller.html#handle_call/3","title":"telemetry_poller.handle_call/3","type":"function"},{"doc":"","ref":"telemetry_poller.html#handle_cast/2","title":"telemetry_poller.handle_cast/2","type":"function"},{"doc":"","ref":"telemetry_poller.html#handle_info/2","title":"telemetry_poller.handle_info/2","type":"function"},{"doc":"","ref":"telemetry_poller.html#init/1","title":"telemetry_poller.init/1","type":"function"},{"doc":"Returns a list of measurements used by the poller.","ref":"telemetry_poller.html#list_measurements/1","title":"telemetry_poller.list_measurements/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#make_measurement/1","title":"telemetry_poller.make_measurement/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#make_measurements_and_filter_misbehaving/1","title":"telemetry_poller.make_measurements_and_filter_misbehaving/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#parse_args/1","title":"telemetry_poller.parse_args/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#parse_measurement/1","title":"telemetry_poller.parse_measurement/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#parse_measurements/1","title":"telemetry_poller.parse_measurements/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#schedule_measurement/1","title":"telemetry_poller.schedule_measurement/1","type":"function"},{"doc":"Starts a poller linked to the calling process. Useful for starting Pollers as a part of a supervision tree. Default options: [{name, telemetry_poller}, {period, timer:seconds(5)}]","ref":"telemetry_poller.html#start_link/1","title":"telemetry_poller.start_link/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#terminate/2","title":"telemetry_poller.terminate/2","type":"function"},{"doc":"","ref":"telemetry_poller.html#validate_period/1","title":"telemetry_poller.validate_period/1","type":"function"},{"doc":"","ref":"telemetry_poller.html#t:measurement/0","title":"telemetry_poller.measurement/0","type":"type"},{"doc":"","ref":"telemetry_poller.html#t:option/0","title":"telemetry_poller.option/0","type":"type"},{"doc":"","ref":"telemetry_poller.html#t:options/0","title":"telemetry_poller.options/0","type":"type"},{"doc":"","ref":"telemetry_poller.html#t:period/0","title":"telemetry_poller.period/0","type":"type"},{"doc":"","ref":"telemetry_poller.html#t:state/0","title":"telemetry_poller.state/0","type":"type"},{"doc":"","ref":"telemetry_poller.html#t:t/0","title":"telemetry_poller.t/0","type":"type"},{"doc":"telemetry_poller Allows to periodically collect measurements and dispatch them as Telemetry events. telemetry_poller by default runs a poller to perform VM measurements: [vm, memory] - contains the total memory, process memory, and all other keys in erlang:memory/0 [vm, total_run_queue_lengths] - returns the run queue lengths for CPU and IO schedulers. It contains the total , cpu and io measurements [vm, system_counts] - returns the current process, atom and port count as per erlang:system_info/1 You can directly consume those events after adding telemetry_poller as a dependency. Poller also provides a convenient API for running custom pollers.","ref":"readme.html","title":"telemetry_poller","type":"extras"},{"doc":"Poller also includes conveniences for performing process-based measurements as well as custom ones. Erlang First define the poller with the custom measurements. The first measurement is the built-in process_info measurement and the second one is given by a custom module-function-args defined by you: telemetry_poller : start_link ( [ { measurements , [ { process_info , [ { name , my_app_worker } , { event , [ my_app , worker ] } , { keys , [ memory , message_queue_len ] } ] } , { example_app_measurements , dispatch_session_count , [ ] } ] } , { period , timer : seconds ( 10 ) } , % configure sampling period - default is timer:seconds(5) { name , my_app_poller } ] ) . Now define the custom measurement and you are good to go: - module ( example_app_measurements ) . dispatch_session_count ( ) -&gt; % emit a telemetry event when called telemetry : execute ( [ example_app , session_count ] , \#{ count =&gt; example_app : session_count ( ) } , \#{ } ) . Elixir First define the poller with the custom measurements. The first measurement is the built-in process_info measurement and the second one is given by a custom module-function-args defined by you: defmodule ExampleApp.Measurements do def dispatch_session_count ( ) do # emit a telemetry event when called :telemetry . execute ( [ :example_app , :session_count ] , %{ count : ExampleApp . session_count ( ) } , %{ } ) end end :telemetry_poller . start_link ( # include custom measurement as an MFA tuple measurements : [ { :process_info , name : :my_app_worker , event : [ :my_app , :worker ] , keys : [ :message , :message_queue_len ] } , { ExampleApp.Measurements , :dispatch_session_count , [ ] } , ] , period : :timer . seconds ( 10 ) , # configure sampling period - default is :timer.seconds(5) name : :my_app_poller )","ref":"readme.html#defining-custom-measurements","title":"telemetry_poller - Defining custom measurements","type":"extras"},{"doc":"See documentation for more concrete examples and usage instructions.","ref":"readme.html#documentation","title":"telemetry_poller - Documentation","type":"extras"},{"doc":"telemetry_poller is copyright (c) 2018 Chris McCord and Erlang Solutions. telemetry_poller source code is released under Apache License, Version 2.0. See LICENSE and NOTICE files for more information.","ref":"readme.html#copyright-and-license","title":"telemetry_poller - Copyright and License","type":"extras"},{"doc":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"Added Support {:global, atom()} and {:via, module(), term()} names for the poller process.","ref":"changelog.html#0-5-1","title":"Changelog - 0.5.1","type":"extras"},{"doc":"Added system_counts measurement","ref":"changelog.html#0-5-0","title":"Changelog - 0.5.0","type":"extras"},{"doc":"Changed Improve docs No longer add a default name to telemetry processes","ref":"changelog.html#0-4-1","title":"Changelog - 0.4.1","type":"extras"},{"doc":"Telemetry Poller has been rewritten in Erlang so it can be used by the overall Erlang community. Therefore, the Telemetry.Poller module must now be accessed as telemetry_poller . A new process_info measurement has also been added and the vm_measurements and measurements keys have been merged into a single measurements key for simplicity. Added :process_info measurement Changed vm_measurements and measurements have been merged into measurements Telemetry.Poller has been rewritten to telemetry_poller","ref":"changelog.html#0-4-0","title":"Changelog - 0.4.0","type":"extras"},{"doc":"This release marks the upgrade to Telemetry 0.4.0. This means that Poller measurements can emit a map of values now instead of a single one, making it less &quot;noisy&quot; when it comes to number of emitted events. All specific memory measurements have been replaced with a single :memory measurement sending all the values that were emitted by old measurements at once. :run_queue_lengths VM measurement has been removed for now, as we believe that as detailed data as it provided is not necessary to effectively debug the system. :total_run_queue_lengths VM measurement has been changed so that it reports a :total length of run queues, length of :cpu run queues (including dirty CPU run queue), and length of (dirty) :io run queue. Added :memory VM measurement reporting all the data returned by :erlang.memory/0 call. Changed :total_run_queue_lengths VM measurement is reporting a :total , :cpu and :io run queue lengths now. See documentation for more details. Removed :total_memory , :atom_memory , :atom_used_memory , :processes_memory , :processes_used_memory , :binary_memory , :ets_memory , :code_memory and :system_memory VM measurements have been removed. Please use the :memory measurement now instead.","ref":"changelog.html#0-3-0","title":"Changelog - 0.3.0","type":"extras"},{"doc":"Added Added :total_run_queue_lengths and :run_queue_lengths memory measurements; Changed :total_run_queue_lengths is now included in the set of default VM measurements; A default Poller process, with a default set of VM measurements, is started when :telemetry_poller application starts (configurable via :telemetry.poller, :default application environment). VM measurements are now provided to Poller's :vm_measurements option. Passing atom :default to this option makes the Poller use a default set of VM measurements; Telemetry has been upgraded to version 0.3, meaning that VM measurements now use this version to emit the events. Removed Telemetry.Poller.vm_measurements/0 function has been removed in favor of :vm_measurements option. Fixed Fixed the type definition of Telemetry.Poller.measurement/0 type - no Dialyzer warnings are emitted when running it on the project.","ref":"changelog.html#0-2-0","title":"Changelog - 0.2.0","type":"extras"},{"doc":"Added The Poller process periodically invoking registered functions which emit Telemetry events. It supports VM memory measurements and custom measurements provided as MFAs.","ref":"changelog.html#0-1-0","title":"Changelog - 0.1.0","type":"extras"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"Copyright (c) 2018, Chris McCord and Erlang Solutions Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"notice.html","title":"NOTICE","type":"extras"}]