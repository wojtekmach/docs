searchNodes=[{"doc":"An OpenTelemetry Trace consists of 1 or more Spans that either have a parent/child relationship or are linked together through a Link. Each Span has a TraceId ( trace_id/0 ), SpanId ( span_id/0 ), and a start and end time in nanoseconds. This module provides declaration of the types used throughout the library, as well as functions for building the additional pieces of a span that are optional. Each item can be attached to individual Span using the functions in OpenTelemetry.Span module. Example require OpenTelemetry.Tracer require OpenTelemetry.Span OpenTelemetry . register_application_tracer ( :this_otp_app ) Tracer . start_span ( &quot;some-span&quot; ) ... event = &quot;ecto.query&quot; ecto_attributes = OpenTelemetry . event ( [ { &quot;query&quot; , query } , { &quot;total_time&quot; , total_time } ] ) OpenTelemetry.Span . add_event ( event , ecto_event ) ... Tracer . end_span ( )","ref":"OpenTelemetry.html","title":"OpenTelemetry","type":"module"},{"doc":"Convert a native monotonic timestamp to POSIX time of any :erlang.time_unit/0 . Meaning the time since Epoch. Epoch is defined to be 00:00:00 UTC, 1970-01-01.","ref":"OpenTelemetry.html#convert_timestamp/2","title":"OpenTelemetry.convert_timestamp/2","type":"function"},{"doc":"Creates a event/0 .","ref":"OpenTelemetry.html#event/2","title":"OpenTelemetry.event/2","type":"function"},{"doc":"Creates a event/0 .","ref":"OpenTelemetry.html#event/3","title":"OpenTelemetry.event/3","type":"function"},{"doc":"Creates a list of event/0 items.","ref":"OpenTelemetry.html#events/1","title":"OpenTelemetry.events/1","type":"function"},{"doc":"See :opentelemetry.get_tracer/1 .","ref":"OpenTelemetry.html#get_tracer/1","title":"OpenTelemetry.get_tracer/1","type":"function"},{"doc":"Creates a link/0 from a span_ctx/0 .","ref":"OpenTelemetry.html#link/1","title":"OpenTelemetry.link/1","type":"function"},{"doc":"Creates a link/0 from a span_ctx/0 and list of attributes/0 .","ref":"OpenTelemetry.html#link/2","title":"OpenTelemetry.link/2","type":"function"},{"doc":"Creates a link/0 .","ref":"OpenTelemetry.html#link/4","title":"OpenTelemetry.link/4","type":"function"},{"doc":"Creates a list of link/0 from a list of 4-tuples.","ref":"OpenTelemetry.html#links/1","title":"OpenTelemetry.links/1","type":"function"},{"doc":"Registering a Named Tracer with the name of an OTP Application enables each module in the Application to be mapped to the Named Tracer, named for the Application and using the version of the currently loaded Application by that name. Macros in OpenTelemetry.Tracer use the name of the module they are being used in in order to lookup the Named Tracer registered for that module and using it for trace operations.","ref":"OpenTelemetry.html#register_application_tracer/1","title":"OpenTelemetry.register_application_tracer/1","type":"function"},{"doc":"See :opentelemetry.register_tracer/2 .","ref":"OpenTelemetry.html#register_tracer/2","title":"OpenTelemetry.register_tracer/2","type":"function"},{"doc":"See :opentelemetry.set_default_tracer/1 .","ref":"OpenTelemetry.html#set_default_tracer/1","title":"OpenTelemetry.set_default_tracer/1","type":"function"},{"doc":"Creates a Status.","ref":"OpenTelemetry.html#status/2","title":"OpenTelemetry.status/2","type":"function"},{"doc":"A monotonically increasing time provided by the Erlang runtime system in the native time unit. This value is the most accurate and precise timestamp available from the Erlang runtime and should be used for finding durations or any timestamp that can be converted to a system time before being sent to another system. Use convert_timestamp/2 or timestamp_to_nano/1 to convert a native monotonic time to a system time of either nanoseconds or another unit. Using these functions allows timestamps to be accurate, used for duration and be exportable as POSIX time when needed.","ref":"OpenTelemetry.html#timestamp/0","title":"OpenTelemetry.timestamp/0","type":"function"},{"doc":"Convert a native monotonic timestamp to nanosecond POSIX time. Meaning the time since Epoch. Epoch is defined to be 00:00:00 UTC, 1970-01-01.","ref":"OpenTelemetry.html#timestamp_to_nano/1","title":"OpenTelemetry.timestamp_to_nano/1","type":"function"},{"doc":"","ref":"OpenTelemetry.html#t:attribute_key/0","title":"OpenTelemetry.attribute_key/0","type":"type"},{"doc":"","ref":"OpenTelemetry.html#t:attribute_value/0","title":"OpenTelemetry.attribute_value/0","type":"type"},{"doc":"Attributes are a collection of key/value pairs. The value can be a string, an integer, a double or the boolean values true or false . Note, global attributes like server name can be set using the resource API. Examples of attributes: [ { &quot;/http/user_agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; } { &quot;/http/server_latency&quot; , 300 } { &quot;abc.com/myattribute&quot; , True } { &quot;abc.com/score&quot; , 10.239 } ]","ref":"OpenTelemetry.html#t:attributes/0","title":"OpenTelemetry.attributes/0","type":"type"},{"doc":"An Event is a time-stamped annotation of the span, consisting of user-supplied text description and key-value pairs.","ref":"OpenTelemetry.html#t:event/0","title":"OpenTelemetry.event/0","type":"type"},{"doc":"","ref":"OpenTelemetry.html#t:event_name/0","title":"OpenTelemetry.event_name/0","type":"type"},{"doc":"A Link is a pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.","ref":"OpenTelemetry.html#t:link/0","title":"OpenTelemetry.link/0","type":"type"},{"doc":"","ref":"OpenTelemetry.html#t:links/0","title":"OpenTelemetry.links/0","type":"type"},{"doc":"Span represents a single operation within a trace. Spans can be nested to form a trace tree. Spans may also be linked to other spans from the same or different trace and form graphs. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous - there may be gaps or overlaps between spans in a trace.","ref":"OpenTelemetry.html#t:span/0","title":"OpenTelemetry.span/0","type":"type"},{"doc":"A SpanContext represents the portion of a Span needed to do operations on a Span. Within a process it acts as a key for looking up and modifying the actual Span. It is also what is serialized and propagated across process boundaries.","ref":"OpenTelemetry.html#t:span_ctx/0","title":"OpenTelemetry.span_ctx/0","type":"type"},{"doc":"SpanId is a unique identifier for a span within a trace, assigned when the span is created. The ID is an 8-byte array. An ID with all zeroes is considered invalid.","ref":"OpenTelemetry.html#t:span_id/0","title":"OpenTelemetry.span_id/0","type":"type"},{"doc":"","ref":"OpenTelemetry.html#t:span_kind/0","title":"OpenTelemetry.span_kind/0","type":"type"},{"doc":"An optional final status for this span. Semantically when Status wasn't set it means span ended without errors and assume ok .","ref":"OpenTelemetry.html#t:status/0","title":"OpenTelemetry.status/0","type":"type"},{"doc":"TraceId is a unique identifier for a trace. All spans from the same trace share the same trace_id . The ID is a 16-byte array. An ID with all zeroes is considered invalid.","ref":"OpenTelemetry.html#t:trace_id/0","title":"OpenTelemetry.trace_id/0","type":"type"},{"doc":"TracerContext refers to the data kept in process by the tracer to track the current SpanContext and the parent.","ref":"OpenTelemetry.html#t:tracer_ctx/0","title":"OpenTelemetry.tracer_ctx/0","type":"type"},{"doc":"Tracestate represents tracing-system specific context in a list of key-value pairs. Tracestate allows different vendors propagate additional information and inter-operate with their legacy Id formats. It is a tracestate in the w3c-trace-context format . See also https://github.com/w3c/distributed-tracing for more details about this field.","ref":"OpenTelemetry.html#t:tracestate/0","title":"OpenTelemetry.tracestate/0","type":"type"},{"doc":"Baggage is used to annotate telemetry, adding context and information to metrics, traces, and logs. It is represented by a set of name/value pairs describing user-defined properties.","ref":"OpenTelemetry.Baggage.html","title":"OpenTelemetry.Baggage","type":"module"},{"doc":"See :otel_baggage.clear/0 .","ref":"OpenTelemetry.Baggage.html#clear/0","title":"OpenTelemetry.Baggage.clear/0","type":"function"},{"doc":"See :otel_baggage.clear/1 .","ref":"OpenTelemetry.Baggage.html#clear/1","title":"OpenTelemetry.Baggage.clear/1","type":"function"},{"doc":"See :otel_baggage.get_all/0 .","ref":"OpenTelemetry.Baggage.html#get_all/0","title":"OpenTelemetry.Baggage.get_all/0","type":"function"},{"doc":"See :otel_baggage.get_all/1 .","ref":"OpenTelemetry.Baggage.html#get_all/1","title":"OpenTelemetry.Baggage.get_all/1","type":"function"},{"doc":"See :otel_baggage.get_text_map_propagators/0 .","ref":"OpenTelemetry.Baggage.html#get_text_map_propagators/0","title":"OpenTelemetry.Baggage.get_text_map_propagators/0","type":"function"},{"doc":"See :otel_baggage.set/1 .","ref":"OpenTelemetry.Baggage.html#set/1","title":"OpenTelemetry.Baggage.set/1","type":"function"},{"doc":"See :otel_baggage.set/2 .","ref":"OpenTelemetry.Baggage.html#set/2","title":"OpenTelemetry.Baggage.set/2","type":"function"},{"doc":"See :otel_baggage.set/3 .","ref":"OpenTelemetry.Baggage.html#set/3","title":"OpenTelemetry.Baggage.set/3","type":"function"},{"doc":"See :otel_baggage.set/4 .","ref":"OpenTelemetry.Baggage.html#set/4","title":"OpenTelemetry.Baggage.set/4","type":"function"},{"doc":"Ctx is responsible for propagating values within a process that are associated with a particular Trace or set of Baggage. OpenTelemetry.Tracer and OpenTelemetry.Baggage handle updating the Context.","ref":"OpenTelemetry.Ctx.html","title":"OpenTelemetry.Ctx","type":"module"},{"doc":"See :otel_ctx.attach/1 .","ref":"OpenTelemetry.Ctx.html#attach/1","title":"OpenTelemetry.Ctx.attach/1","type":"function"},{"doc":"See :otel_ctx.clear/0 .","ref":"OpenTelemetry.Ctx.html#clear/0","title":"OpenTelemetry.Ctx.clear/0","type":"function"},{"doc":"See :otel_ctx.detach/1 .","ref":"OpenTelemetry.Ctx.html#detach/1","title":"OpenTelemetry.Ctx.detach/1","type":"function"},{"doc":"See :otel_ctx.get_current/0 .","ref":"OpenTelemetry.Ctx.html#get_current/0","title":"OpenTelemetry.Ctx.get_current/0","type":"function"},{"doc":"See :otel_ctx.get_value/2 .","ref":"OpenTelemetry.Ctx.html#get_value/2","title":"OpenTelemetry.Ctx.get_value/2","type":"function"},{"doc":"See :otel_ctx.get_value/3 .","ref":"OpenTelemetry.Ctx.html#get_value/3","title":"OpenTelemetry.Ctx.get_value/3","type":"function"},{"doc":"See :otel_ctx.new/0 .","ref":"OpenTelemetry.Ctx.html#new/0","title":"OpenTelemetry.Ctx.new/0","type":"function"},{"doc":"See :otel_ctx.remove/1 .","ref":"OpenTelemetry.Ctx.html#remove/1","title":"OpenTelemetry.Ctx.remove/1","type":"function"},{"doc":"See :otel_ctx.set_value/2 .","ref":"OpenTelemetry.Ctx.html#set_value/2","title":"OpenTelemetry.Ctx.set_value/2","type":"function"},{"doc":"See :otel_ctx.set_value/3 .","ref":"OpenTelemetry.Ctx.html#set_value/3","title":"OpenTelemetry.Ctx.set_value/3","type":"function"},{"doc":"","ref":"OpenTelemetry.Ctx.html#t:t/0","title":"OpenTelemetry.Ctx.t/0","type":"type"},{"doc":"This module contains macros for Span operations that update the active current Span in the current process. An example of creating an Event and adding it to the current Span: require OpenTelemetry.Span ... event = &quot;ecto.query&quot; ecto_attributes = OpenTelemetry . event ( [ { &quot;query&quot; , query } , { &quot;total_time&quot; , total_time } ] ) OpenTelemetry.Span . add_event ( event , ecto_attributes ) ... A Span represents a single operation within a trace. Spans can be nested to form a trace tree. Each trace contains a root span, which typically describes the end-to-end latency and, optionally, one or more sub-spans for its sub-operations. Spans encapsulate: The span name An immutable SpanContext ( OpenTelemetry.span_ctx/0 ) that uniquely identifies the Span A parent Span in the form of a Span ( OpenTelemetry.span/0 ), SpanContext ( OpenTelemetry.span_ctx/0 ), or undefined A start timestamp An end timestamp An ordered mapping of Attributes ( OpenTelemetry.attributes/0 ) A list of Links to other Spans ( OpenTelemetry.link/0 ) A list of timestamped Events ( OpenTelemetry.event/0 ) A Status ( OpenTelemetry.status/0 )","ref":"OpenTelemetry.Span.html","title":"OpenTelemetry.Span","type":"module"},{"doc":"Add an event to the currently active Span.","ref":"OpenTelemetry.Span.html#add_event/3","title":"OpenTelemetry.Span.add_event/3","type":"function"},{"doc":"Add a list of events to the currently active Span.","ref":"OpenTelemetry.Span.html#add_events/2","title":"OpenTelemetry.Span.add_events/2","type":"function"},{"doc":"End the Span. Sets the end timestamp for the currently active Span. This has no effect on any child Spans that may exist of this Span. The Span Context is returned with is_recording set to false .","ref":"OpenTelemetry.Span.html#end_span/1","title":"OpenTelemetry.Span.end_span/1","type":"function"},{"doc":"","ref":"OpenTelemetry.Span.html#is_recording/1","title":"OpenTelemetry.Span.is_recording/1","type":"function"},{"doc":"","ref":"OpenTelemetry.Span.html#is_valid/1","title":"OpenTelemetry.Span.is_valid/1","type":"function"},{"doc":"Record an exception as an event, following the semantics convetions for exceptions. If trace is not provided, the stacktrace is retrieved from Process.info/2","ref":"OpenTelemetry.Span.html#record_exception/4","title":"OpenTelemetry.Span.record_exception/4","type":"function"},{"doc":"Set an attribute with key and value on the currently active Span.","ref":"OpenTelemetry.Span.html#set_attribute/3","title":"OpenTelemetry.Span.set_attribute/3","type":"function"},{"doc":"Add a list of attributes to the currently active Span.","ref":"OpenTelemetry.Span.html#set_attributes/2","title":"OpenTelemetry.Span.set_attributes/2","type":"function"},{"doc":"Sets the Status of the currently active Span. If used, this will override the default Span Status, which is ok .","ref":"OpenTelemetry.Span.html#set_status/2","title":"OpenTelemetry.Span.set_status/2","type":"function"},{"doc":"Get the SpanId of a Span.","ref":"OpenTelemetry.Span.html#span_id/1","title":"OpenTelemetry.Span.span_id/1","type":"function"},{"doc":"Get the TraceId of a Span.","ref":"OpenTelemetry.Span.html#trace_id/1","title":"OpenTelemetry.Span.trace_id/1","type":"function"},{"doc":"Get the Tracestate of a Span.","ref":"OpenTelemetry.Span.html#tracestate/1","title":"OpenTelemetry.Span.tracestate/1","type":"function"},{"doc":"Updates the Span name. It is highly discouraged to update the name of a Span after its creation. Span name is often used to group, filter and identify the logical groups of spans. And often, filtering logic will be implemented before the Span creation for performance reasons. Thus the name update may interfere with this logic. The function name is called UpdateName to differentiate this function from the regular property setter. It emphasizes that this operation signifies a major change for a Span and may lead to re-calculation of sampling or filtering decisions made previously depending on the implementation.","ref":"OpenTelemetry.Span.html#update_name/2","title":"OpenTelemetry.Span.update_name/2","type":"function"},{"doc":"This module contains macros for Tracer operations around the lifecycle of the Spans within a Trace. The Tracer is able to start a new Span as a child of the active Span of the current process, set a different Span to be the current Span by passing the Span's context, end a Span or run a code block within the context of a newly started span that is ended when the code block completes. The macros use the Tracer registered to the Application the module using the macro is included in, assuming OpenTelemetry.register_application_tracer/1 has been called for the Application. If not then the default Tracer is used. require OpenTelemetry.Tracer OpenTelemetry.Tracer . with_span &quot;span-1&quot; do ... do something ... end","ref":"OpenTelemetry.Tracer.html","title":"OpenTelemetry.Tracer","type":"module"},{"doc":"Add an event to the currently active Span.","ref":"OpenTelemetry.Tracer.html#add_event/2","title":"OpenTelemetry.Tracer.add_event/2","type":"function"},{"doc":"Add a list of events to the currently active Span.","ref":"OpenTelemetry.Tracer.html#add_events/1","title":"OpenTelemetry.Tracer.add_events/1","type":"function"},{"doc":"Returns the currently active OpenTelemetry.span_ctx/0 .","ref":"OpenTelemetry.Tracer.html#current_span_ctx/0","title":"OpenTelemetry.Tracer.current_span_ctx/0","type":"function"},{"doc":"Returns the OpenTelemetry.span_ctx/0 active in Context ctx .","ref":"OpenTelemetry.Tracer.html#current_span_ctx/1","title":"OpenTelemetry.Tracer.current_span_ctx/1","type":"function"},{"doc":"End the Span. Sets the end timestamp for the currently active Span. This has no effect on any child Spans that may exist of this Span. The Span in the current Context has its is_recording set to false .","ref":"OpenTelemetry.Tracer.html#end_span/0","title":"OpenTelemetry.Tracer.end_span/0","type":"function"},{"doc":"Set an attribute with key and value on the currently active Span.","ref":"OpenTelemetry.Tracer.html#set_attribute/2","title":"OpenTelemetry.Tracer.set_attribute/2","type":"function"},{"doc":"Add a list of attributes to the currently active Span.","ref":"OpenTelemetry.Tracer.html#set_attributes/1","title":"OpenTelemetry.Tracer.set_attributes/1","type":"function"},{"doc":"Takes a OpenTelemetry.span_ctx/0 and the Tracer sets it to the currently active Span.","ref":"OpenTelemetry.Tracer.html#set_current_span/1","title":"OpenTelemetry.Tracer.set_current_span/1","type":"function"},{"doc":"Takes a OpenTelemetry.Ctx.t/0 and the OpenTelemetry.span_ctx/0 and the Tracer sets it to the current span in the pass Context.","ref":"OpenTelemetry.Tracer.html#set_current_span/2","title":"OpenTelemetry.Tracer.set_current_span/2","type":"function"},{"doc":"Sets the Status of the currently active Span. If used, this will override the default Span Status, which is ok .","ref":"OpenTelemetry.Tracer.html#set_status/1","title":"OpenTelemetry.Tracer.set_status/1","type":"function"},{"doc":"Starts a new span and does not make it the current active span of the current process. The current active Span is used as the parent of the created Span.","ref":"OpenTelemetry.Tracer.html#start_span/2","title":"OpenTelemetry.Tracer.start_span/2","type":"macro"},{"doc":"Starts a new span and does not make it the current active span of the current process. The current active Span is used as the parent of the created Span.","ref":"OpenTelemetry.Tracer.html#start_span/3","title":"OpenTelemetry.Tracer.start_span/3","type":"macro"},{"doc":"Updates the Span name. It is highly discouraged to update the name of a Span after its creation. Span name is often used to group, filter and identify the logical groups of spans. And often, filtering logic will be implemented before the Span creation for performance reasons. Thus the name update may interfere with this logic. The function name is called UpdateName to differentiate this function from the regular property setter. It emphasizes that this operation signifies a major change for a Span and may lead to re-calculation of sampling or filtering decisions made previously depending on the implementation.","ref":"OpenTelemetry.Tracer.html#update_name/1","title":"OpenTelemetry.Tracer.update_name/1","type":"function"},{"doc":"Creates a new span which is set to the currently active Span in the Context of the block. The Span is ended automatically when the block completes and the Context is what it was before the block. See start_span/2 and end_span/0 .","ref":"OpenTelemetry.Tracer.html#with_span/3","title":"OpenTelemetry.Tracer.with_span/3","type":"macro"},{"doc":"Creates a new span which is set to the currently active Span in the Context of the block. The Span is ended automatically when the block completes and the Context is what it was before the block. See start_span/2 and end_span/0 .","ref":"OpenTelemetry.Tracer.html#with_span/4","title":"OpenTelemetry.Tracer.with_span/4","type":"macro"},{"doc":"","ref":"OpenTelemetry.Tracer.html#t:start_opts/0","title":"OpenTelemetry.Tracer.start_opts/0","type":"type"},{"doc":"The types defined here, and referencing records in opentelemetry.hrl are used to store trace information while being collected on the Erlang node. Thus, while the types are based on protos found in the opentelemetry-proto repo: src/opentelemetry/proto/trace/v1/trace.proto, they are not exact translations because further processing is done after the span has finished and can be vendor specific. For example, there is no count of the number of dropped attributes in the span record. And an attribute's value can be a function to only evaluate the value if it is actually used (at the time of exporting). And the stacktrace is a regular Erlang stack trace.","ref":"opentelemetry.html","title":"opentelemetry","type":"module"},{"doc":"Convert a native monotonic timestamp to POSIX time of any erlang:time_unit() . Meaning the time since Epoch. Epoch is defined to be 00:00:00 UTC, 1970-01-01.","ref":"opentelemetry.html#convert_timestamp/2","title":"opentelemetry.convert_timestamp/2","type":"function"},{"doc":"","ref":"opentelemetry.html#event/2","title":"opentelemetry.event/2","type":"function"},{"doc":"","ref":"opentelemetry.html#event/3","title":"opentelemetry.event/3","type":"function"},{"doc":"","ref":"opentelemetry.html#events/1","title":"opentelemetry.events/1","type":"function"},{"doc":"Generates a 64 bit random integer to use as a span id.","ref":"opentelemetry.html#generate_span_id/0","title":"opentelemetry.generate_span_id/0","type":"function"},{"doc":"Generates a 128 bit random integer to use as a trace id.","ref":"opentelemetry.html#generate_trace_id/0","title":"opentelemetry.generate_trace_id/0","type":"function"},{"doc":"","ref":"opentelemetry.html#get_text_map_extractors/0","title":"opentelemetry.get_text_map_extractors/0","type":"function"},{"doc":"","ref":"opentelemetry.html#get_text_map_injectors/0","title":"opentelemetry.get_text_map_injectors/0","type":"function"},{"doc":"","ref":"opentelemetry.html#get_tracer/0","title":"opentelemetry.get_tracer/0","type":"function"},{"doc":"","ref":"opentelemetry.html#get_tracer/1","title":"opentelemetry.get_tracer/1","type":"function"},{"doc":"","ref":"opentelemetry.html#link/1","title":"opentelemetry.link/1","type":"function"},{"doc":"","ref":"opentelemetry.html#link/2","title":"opentelemetry.link/2","type":"function"},{"doc":"","ref":"opentelemetry.html#link/4","title":"opentelemetry.link/4","type":"function"},{"doc":"","ref":"opentelemetry.html#link_or_false/4","title":"opentelemetry.link_or_false/4","type":"function"},{"doc":"","ref":"opentelemetry.html#links/1","title":"opentelemetry.links/1","type":"function"},{"doc":"","ref":"opentelemetry.html#register_application_tracer/1","title":"opentelemetry.register_application_tracer/1","type":"function"},{"doc":"","ref":"opentelemetry.html#register_tracer/2","title":"opentelemetry.register_tracer/2","type":"function"},{"doc":"","ref":"opentelemetry.html#set_default_tracer/1","title":"opentelemetry.set_default_tracer/1","type":"function"},{"doc":"","ref":"opentelemetry.html#set_text_map_extractors/1","title":"opentelemetry.set_text_map_extractors/1","type":"function"},{"doc":"","ref":"opentelemetry.html#set_text_map_injectors/1","title":"opentelemetry.set_text_map_injectors/1","type":"function"},{"doc":"","ref":"opentelemetry.html#set_tracer/2","title":"opentelemetry.set_tracer/2","type":"function"},{"doc":"","ref":"opentelemetry.html#status/2","title":"opentelemetry.status/2","type":"function"},{"doc":"A monotonically increasing time provided by the Erlang runtime system in the native time unit. This value is the most accurate and precise timestamp available from the Erlang runtime and should be used for finding durations or any timestamp that can be converted to a system time before being sent to another system.","ref":"opentelemetry.html#timestamp/0","title":"opentelemetry.timestamp/0","type":"function"},{"doc":"Convert a native monotonic timestamp to nanosecond POSIX time. Meaning the time since Epoch. Epoch is defined to be 00:00:00 UTC, 1970-01-01.","ref":"opentelemetry.html#timestamp_to_nano/1","title":"opentelemetry.timestamp_to_nano/1","type":"function"},{"doc":"","ref":"opentelemetry.html#uniform/1","title":"opentelemetry.uniform/1","type":"function"},{"doc":"","ref":"opentelemetry.html#verify_and_set_term/3","title":"opentelemetry.verify_and_set_term/3","type":"function"},{"doc":"","ref":"opentelemetry.html#verify_and_set_term/4","title":"opentelemetry.verify_and_set_term/4","type":"function"},{"doc":"","ref":"opentelemetry.html#verify_module_exists/1","title":"opentelemetry.verify_module_exists/1","type":"function"},{"doc":"","ref":"opentelemetry.html#t:attribute/0","title":"opentelemetry.attribute/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:attribute_key/0","title":"opentelemetry.attribute_key/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:attribute_value/0","title":"opentelemetry.attribute_value/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:attributes/0","title":"opentelemetry.attributes/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:event/0","title":"opentelemetry.event/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:event_name/0","title":"opentelemetry.event_name/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:events/0","title":"opentelemetry.events/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:link/0","title":"opentelemetry.link/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:links/0","title":"opentelemetry.links/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:resource/0","title":"opentelemetry.resource/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:span/0","title":"opentelemetry.span/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:span_ctx/0","title":"opentelemetry.span_ctx/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:span_id/0","title":"opentelemetry.span_id/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:span_kind/0","title":"opentelemetry.span_kind/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:span_name/0","title":"opentelemetry.span_name/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:status/0","title":"opentelemetry.status/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:status_code/0","title":"opentelemetry.status_code/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:text_map/0","title":"opentelemetry.text_map/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:timestamp/0","title":"opentelemetry.timestamp/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:trace_flags/0","title":"opentelemetry.trace_flags/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:trace_id/0","title":"opentelemetry.trace_id/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:tracer/0","title":"opentelemetry.tracer/0","type":"type"},{"doc":"","ref":"opentelemetry.html#t:tracestate/0","title":"opentelemetry.tracestate/0","type":"type"},{"doc":"Baggage is used to annotate telemetry, adding context and information to metrics, traces, and logs. It is represented by a set of name/value pairs describing user-defined properties.","ref":"otel_baggage.html","title":"otel_baggage","type":"module"},{"doc":"","ref":"otel_baggage.html#check_utf8/1","title":"otel_baggage.check_utf8/1","type":"function"},{"doc":"","ref":"otel_baggage.html#clear/0","title":"otel_baggage.clear/0","type":"function"},{"doc":"","ref":"otel_baggage.html#clear/1","title":"otel_baggage.clear/1","type":"function"},{"doc":"","ref":"otel_baggage.html#convert_to_binary/3","title":"otel_baggage.convert_to_binary/3","type":"function"},{"doc":"","ref":"otel_baggage.html#decode_key/1","title":"otel_baggage.decode_key/1","type":"function"},{"doc":"","ref":"otel_baggage.html#decode_value/1","title":"otel_baggage.decode_value/1","type":"function"},{"doc":"","ref":"otel_baggage.html#encode_key/1","title":"otel_baggage.encode_key/1","type":"function"},{"doc":"","ref":"otel_baggage.html#encode_metadata/1","title":"otel_baggage.encode_metadata/1","type":"function"},{"doc":"","ref":"otel_baggage.html#encode_value/1","title":"otel_baggage.encode_value/1","type":"function"},{"doc":"","ref":"otel_baggage.html#form_urlencode/2","title":"otel_baggage.form_urlencode/2","type":"function"},{"doc":"","ref":"otel_baggage.html#get_all/0","title":"otel_baggage.get_all/0","type":"function"},{"doc":"","ref":"otel_baggage.html#get_all/1","title":"otel_baggage.get_all/1","type":"function"},{"doc":"","ref":"otel_baggage.html#get_text_map_propagators/0","title":"otel_baggage.get_text_map_propagators/0","type":"function"},{"doc":"","ref":"otel_baggage.html#html5_byte_encode/1","title":"otel_baggage.html5_byte_encode/1","type":"function"},{"doc":"","ref":"otel_baggage.html#html5_byte_encode/2","title":"otel_baggage.html5_byte_encode/2","type":"function"},{"doc":"","ref":"otel_baggage.html#is_hex_digit/1","title":"otel_baggage.is_hex_digit/1","type":"function"},{"doc":"","ref":"otel_baggage.html#is_url_char/1","title":"otel_baggage.is_url_char/1","type":"function"},{"doc":"","ref":"otel_baggage.html#lookup/2","title":"otel_baggage.lookup/2","type":"function"},{"doc":"","ref":"otel_baggage.html#metadata_decode/1","title":"otel_baggage.metadata_decode/1","type":"function"},{"doc":"","ref":"otel_baggage.html#percent_decode/1","title":"otel_baggage.percent_decode/1","type":"function"},{"doc":"","ref":"otel_baggage.html#raw_decode/1","title":"otel_baggage.raw_decode/1","type":"function"},{"doc":"","ref":"otel_baggage.html#raw_decode/2","title":"otel_baggage.raw_decode/2","type":"function"},{"doc":"","ref":"otel_baggage.html#set/1","title":"otel_baggage.set/1","type":"function"},{"doc":"","ref":"otel_baggage.html#set/2","title":"otel_baggage.set/2","type":"function"},{"doc":"","ref":"otel_baggage.html#set/3","title":"otel_baggage.set/3","type":"function"},{"doc":"","ref":"otel_baggage.html#set/4","title":"otel_baggage.set/4","type":"function"},{"doc":"","ref":"otel_baggage.html#string_decode/1","title":"otel_baggage.string_decode/1","type":"function"},{"doc":"","ref":"otel_baggage.html#to_binary/1","title":"otel_baggage.to_binary/1","type":"function"},{"doc":"","ref":"otel_baggage.html#update_metadata/1","title":"otel_baggage.update_metadata/1","type":"function"},{"doc":"","ref":"otel_baggage.html#update_metadata/2","title":"otel_baggage.update_metadata/2","type":"function"},{"doc":"","ref":"otel_baggage.html#verify_baggage/1","title":"otel_baggage.verify_baggage/1","type":"function"},{"doc":"","ref":"otel_baggage.html#verify_metadata/1","title":"otel_baggage.verify_metadata/1","type":"function"},{"doc":"","ref":"otel_baggage.html#t:key/0","title":"otel_baggage.key/0","type":"type"},{"doc":"","ref":"otel_baggage.html#t:metadata/0","title":"otel_baggage.metadata/0","type":"type"},{"doc":"","ref":"otel_baggage.html#t:t/0","title":"otel_baggage.t/0","type":"type"},{"doc":"","ref":"otel_baggage.html#t:value/0","title":"otel_baggage.value/0","type":"type"},{"doc":"Ctx is responsible for propagating values within a process that are associated with a particular Trace or set of Baggage. OpenTelemetry.Tracer and OpenTelemetry.Baggage handle updating the Context.","ref":"otel_ctx.html","title":"otel_ctx","type":"module"},{"doc":"","ref":"otel_ctx.html#attach/1","title":"otel_ctx.attach/1","type":"function"},{"doc":"","ref":"otel_ctx.html#clear/0","title":"otel_ctx.clear/0","type":"function"},{"doc":"","ref":"otel_ctx.html#clear/1","title":"otel_ctx.clear/1","type":"function"},{"doc":"","ref":"otel_ctx.html#detach/1","title":"otel_ctx.detach/1","type":"function"},{"doc":"","ref":"otel_ctx.html#get_current/0","title":"otel_ctx.get_current/0","type":"function"},{"doc":"","ref":"otel_ctx.html#get_value/1","title":"otel_ctx.get_value/1","type":"function"},{"doc":"","ref":"otel_ctx.html#get_value/2","title":"otel_ctx.get_value/2","type":"function"},{"doc":"","ref":"otel_ctx.html#get_value/3","title":"otel_ctx.get_value/3","type":"function"},{"doc":"","ref":"otel_ctx.html#new/0","title":"otel_ctx.new/0","type":"function"},{"doc":"","ref":"otel_ctx.html#remove/1","title":"otel_ctx.remove/1","type":"function"},{"doc":"","ref":"otel_ctx.html#remove/2","title":"otel_ctx.remove/2","type":"function"},{"doc":"","ref":"otel_ctx.html#set_value/2","title":"otel_ctx.set_value/2","type":"function"},{"doc":"","ref":"otel_ctx.html#set_value/3","title":"otel_ctx.set_value/3","type":"function"},{"doc":"","ref":"otel_ctx.html#text_map_extractor/2","title":"otel_ctx.text_map_extractor/2","type":"function"},{"doc":"","ref":"otel_ctx.html#text_map_extractor_fun/3","title":"otel_ctx.text_map_extractor_fun/3","type":"function"},{"doc":"","ref":"otel_ctx.html#text_map_injector/2","title":"otel_ctx.text_map_injector/2","type":"function"},{"doc":"","ref":"otel_ctx.html#text_map_injector_fun/3","title":"otel_ctx.text_map_injector_fun/3","type":"function"},{"doc":"","ref":"otel_ctx.html#t:key/0","title":"otel_ctx.key/0","type":"type"},{"doc":"","ref":"otel_ctx.html#t:t/0","title":"otel_ctx.t/0","type":"type"},{"doc":"","ref":"otel_ctx.html#t:token/0","title":"otel_ctx.token/0","type":"type"},{"doc":"","ref":"otel_ctx.html#t:value/0","title":"otel_ctx.value/0","type":"type"},{"doc":"","ref":"otel_propagator.html","title":"otel_propagator","type":"behaviour"},{"doc":"","ref":"otel_propagator.html#c:extract/2","title":"otel_propagator.extract/2","type":"callback"},{"doc":"","ref":"otel_propagator.html#c:inject/1","title":"otel_propagator.inject/1","type":"callback"},{"doc":"","ref":"otel_propagator.html#run_extractors/2","title":"otel_propagator.run_extractors/2","type":"function"},{"doc":"","ref":"otel_propagator.html#run_injectors/2","title":"otel_propagator.run_injectors/2","type":"function"},{"doc":"","ref":"otel_propagator.html#text_map_extract/1","title":"otel_propagator.text_map_extract/1","type":"function"},{"doc":"","ref":"otel_propagator.html#text_map_inject/1","title":"otel_propagator.text_map_inject/1","type":"function"},{"doc":"","ref":"otel_propagator.html#t:carrier/0","title":"otel_propagator.carrier/0","type":"type"},{"doc":"","ref":"otel_propagator.html#t:extractor/1","title":"otel_propagator.extractor/1","type":"type"},{"doc":"","ref":"otel_propagator.html#t:injector/1","title":"otel_propagator.injector/1","type":"type"},{"doc":"","ref":"otel_propagator.html#t:text_map/0","title":"otel_propagator.text_map/0","type":"type"},{"doc":"","ref":"otel_propagator.html#t:text_map_extractor/0","title":"otel_propagator.text_map_extractor/0","type":"type"},{"doc":"","ref":"otel_propagator.html#t:text_map_injector/0","title":"otel_propagator.text_map_injector/0","type":"type"},{"doc":"","ref":"otel_propagator_http_b3.html","title":"otel_propagator_http_b3","type":"module"},{"doc":"","ref":"otel_propagator_http_b3.html#extract/2","title":"otel_propagator_http_b3.extract/2","type":"function"},{"doc":"","ref":"otel_propagator_http_b3.html#inject/1","title":"otel_propagator_http_b3.inject/1","type":"function"},{"doc":"","ref":"otel_propagator_http_b3.html#lookup/2","title":"otel_propagator_http_b3.lookup/2","type":"function"},{"doc":"","ref":"otel_propagator_http_b3.html#span_id/1","title":"otel_propagator_http_b3.span_id/1","type":"function"},{"doc":"","ref":"otel_propagator_http_b3.html#string_to_integer/2","title":"otel_propagator_http_b3.string_to_integer/2","type":"function"},{"doc":"","ref":"otel_propagator_http_b3.html#trace_id/1","title":"otel_propagator_http_b3.trace_id/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html","title":"otel_propagator_http_w3c","type":"module"},{"doc":"","ref":"otel_propagator_http_w3c.html#combine_headers/2","title":"otel_propagator_http_w3c.combine_headers/2","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#decode/1","title":"otel_propagator_http_w3c.decode/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#encode/1","title":"otel_propagator_http_w3c.encode/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#encode_tracestate/1","title":"otel_propagator_http_w3c.encode_tracestate/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#extract/2","title":"otel_propagator_http_w3c.extract/2","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#header_member/2","title":"otel_propagator_http_w3c.header_member/2","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#header_take/2","title":"otel_propagator_http_w3c.header_take/2","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#inject/1","title":"otel_propagator_http_w3c.inject/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#parse_pairs/1","title":"otel_propagator_http_w3c.parse_pairs/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#parse_pairs/2","title":"otel_propagator_http_w3c.parse_pairs/2","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#split/1","title":"otel_propagator_http_w3c.split/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#to_span_ctx/4","title":"otel_propagator_http_w3c.to_span_ctx/4","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#tracestate_decode/1","title":"otel_propagator_http_w3c.tracestate_decode/1","type":"function"},{"doc":"","ref":"otel_propagator_http_w3c.html#tracestate_from_headers/1","title":"otel_propagator_http_w3c.tracestate_from_headers/1","type":"function"},{"doc":"Span behaviour.","ref":"otel_span.html","title":"otel_span","type":"module"},{"doc":"","ref":"otel_span.html#add_event/3","title":"otel_span.add_event/3","type":"function"},{"doc":"","ref":"otel_span.html#add_events/2","title":"otel_span.add_events/2","type":"function"},{"doc":"","ref":"otel_span.html#end_span/1","title":"otel_span.end_span/1","type":"function"},{"doc":"","ref":"otel_span.html#is_recording/1","title":"otel_span.is_recording/1","type":"function"},{"doc":"","ref":"otel_span.html#is_valid/1","title":"otel_span.is_valid/1","type":"function"},{"doc":"","ref":"otel_span.html#record_exception/5","title":"otel_span.record_exception/5","type":"function"},{"doc":"","ref":"otel_span.html#record_exception/6","title":"otel_span.record_exception/6","type":"function"},{"doc":"","ref":"otel_span.html#set_attribute/3","title":"otel_span.set_attribute/3","type":"function"},{"doc":"","ref":"otel_span.html#set_attributes/2","title":"otel_span.set_attributes/2","type":"function"},{"doc":"","ref":"otel_span.html#set_status/2","title":"otel_span.set_status/2","type":"function"},{"doc":"","ref":"otel_span.html#span_id/1","title":"otel_span.span_id/1","type":"function"},{"doc":"","ref":"otel_span.html#trace_id/1","title":"otel_span.trace_id/1","type":"function"},{"doc":"","ref":"otel_span.html#tracestate/1","title":"otel_span.tracestate/1","type":"function"},{"doc":"","ref":"otel_span.html#update_name/2","title":"otel_span.update_name/2","type":"function"},{"doc":"","ref":"otel_span.html#t:start_opts/0","title":"otel_span.start_opts/0","type":"type"},{"doc":"","ref":"otel_tracer.html","title":"otel_tracer","type":"behaviour"},{"doc":"","ref":"otel_tracer.html#add_event/2","title":"otel_tracer.add_event/2","type":"function"},{"doc":"","ref":"otel_tracer.html#add_events/1","title":"otel_tracer.add_events/1","type":"function"},{"doc":"","ref":"otel_tracer.html#current_span_ctx/0","title":"otel_tracer.current_span_ctx/0","type":"function"},{"doc":"","ref":"otel_tracer.html#current_span_ctx/1","title":"otel_tracer.current_span_ctx/1","type":"function"},{"doc":"","ref":"otel_tracer.html#end_span/0","title":"otel_tracer.end_span/0","type":"function"},{"doc":"Returns a span_ctx record with is_recording set to false . This is mainly for use in propagators when they extract a Span to be used as a parent.","ref":"otel_tracer.html#non_recording_span/3","title":"otel_tracer.non_recording_span/3","type":"function"},{"doc":"","ref":"otel_tracer.html#set_attribute/2","title":"otel_tracer.set_attribute/2","type":"function"},{"doc":"","ref":"otel_tracer.html#set_attributes/1","title":"otel_tracer.set_attributes/1","type":"function"},{"doc":"","ref":"otel_tracer.html#set_current_span/1","title":"otel_tracer.set_current_span/1","type":"function"},{"doc":"","ref":"otel_tracer.html#set_current_span/2","title":"otel_tracer.set_current_span/2","type":"function"},{"doc":"","ref":"otel_tracer.html#set_status/1","title":"otel_tracer.set_status/1","type":"function"},{"doc":"","ref":"otel_tracer.html#start_span/3","title":"otel_tracer.start_span/3","type":"function"},{"doc":"","ref":"otel_tracer.html#start_span/4","title":"otel_tracer.start_span/4","type":"function"},{"doc":"","ref":"otel_tracer.html#c:start_span/4","title":"otel_tracer.start_span/4","type":"callback"},{"doc":"","ref":"otel_tracer.html#text_map_propagators/1","title":"otel_tracer.text_map_propagators/1","type":"function"},{"doc":"","ref":"otel_tracer.html#update_name/1","title":"otel_tracer.update_name/1","type":"function"},{"doc":"","ref":"otel_tracer.html#with_span/4","title":"otel_tracer.with_span/4","type":"function"},{"doc":"","ref":"otel_tracer.html#with_span/5","title":"otel_tracer.with_span/5","type":"function"},{"doc":"","ref":"otel_tracer.html#c:with_span/5","title":"otel_tracer.with_span/5","type":"callback"},{"doc":"","ref":"otel_tracer.html#t:traced_fun/1","title":"otel_tracer.traced_fun/1","type":"type"},{"doc":"","ref":"otel_tracer.html#t:tracer_ctx/0","title":"otel_tracer.tracer_ctx/0","type":"type"},{"doc":"","ref":"otel_tracer_noop.html","title":"otel_tracer_noop","type":"module"},{"doc":"","ref":"otel_tracer_noop.html#add_event/4","title":"otel_tracer_noop.add_event/4","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#add_events/3","title":"otel_tracer_noop.add_events/3","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#end_span/2","title":"otel_tracer_noop.end_span/2","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#set_attribute/4","title":"otel_tracer_noop.set_attribute/4","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#set_attributes/3","title":"otel_tracer_noop.set_attributes/3","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#set_status/3","title":"otel_tracer_noop.set_status/3","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#start_span/4","title":"otel_tracer_noop.start_span/4","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#update_name/3","title":"otel_tracer_noop.update_name/3","type":"function"},{"doc":"","ref":"otel_tracer_noop.html#with_span/5","title":"otel_tracer_noop.with_span/5","type":"function"},{"doc":"","ref":"otel_tracer_provider.html","title":"otel_tracer_provider","type":"behaviour"},{"doc":"","ref":"otel_tracer_provider.html#code_change/3","title":"otel_tracer_provider.code_change/3","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#handle_call/3","title":"otel_tracer_provider.handle_call/3","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#handle_cast/2","title":"otel_tracer_provider.handle_cast/2","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#init/1","title":"otel_tracer_provider.init/1","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#c:init/1","title":"otel_tracer_provider.init/1","type":"callback"},{"doc":"","ref":"otel_tracer_provider.html#register_application_tracer/1","title":"otel_tracer_provider.register_application_tracer/1","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#register_tracer/2","title":"otel_tracer_provider.register_tracer/2","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#c:register_tracer/3","title":"otel_tracer_provider.register_tracer/3","type":"callback"},{"doc":"","ref":"otel_tracer_provider.html#resource/0","title":"otel_tracer_provider.resource/0","type":"function"},{"doc":"","ref":"otel_tracer_provider.html#c:resource/1","title":"otel_tracer_provider.resource/1","type":"callback"},{"doc":"","ref":"otel_tracer_provider.html#start_link/2","title":"otel_tracer_provider.start_link/2","type":"function"},{"doc":"Erlang/Elixir OpenTelemetry API This is the API portion of OpenTelemetry for Erlang and Elixir Applications. This is a library, it does not start any processes, and should be the only OpenTelemetry dependency of Erlang/Elixir Applications. The end user of your Application can then choose to include the OpenTelemetry implementation Application. If the implementation Application is not in the final release the OpenTelemetry instrumentation will all be no-ops. This means no processes started, no ETS tables created and nothing added to the process dictionary. This separation is done so you should feel comfortable instrumenting your Erlang/Elixir Application with OpenTelemetry and not worry that a complicated dependency is being forced on your users.","ref":"readme.html","title":"Erlang/Elixir OpenTelemetry API","type":"extras"},{"doc":"When instrumenting an Application to be used as a dependency of other projects it is best practice to register a Tracer with a name and a version using the Application's name and version. This should be the name and version of the Application that has the opentelemetry calls being written in it, not the name of the Application it might be being used to instrument. For example, an Elli middleware to add tracing to the Elli HTTP server would not be named elli , it would be the name of the middleware Application, like opentelemetry_elli . Registration is done through a single process and uses a persistent_term , so should be done only once per-Application. Updating a registration is allowed, so updating the version on a release upgrade can, and should, be done, but will involve the performance penalty of updating a persistent_term . Naming the Tracers provides additional metadata on spans and allows the user of your Application to disable the traces from the dependency if it is needed. Dependency in Elixir def deps do [ { :opentelemetry_api , &quot;~&gt; 0.6.0&quot; } ] end Registering and Using Tracers Directly If it is a runnable application then this registration should happen in start/2 , example below is adding Tracer registration to the Postgres library pgo : start ( _ StartType , _ StartArgs ) -&gt; _ = opentelemetry : register_application_tracer ( pgo ) , . . . Or for an Elixir Application named MyApp : defmodule MyApp do use Application def start ( _type , _args ) do _ = OpenTelemetry . register_application_tracer ( :my_app ) ... end end Then when the spans are started and finished in the application's code the Tracer is fetched with get_tracer/1 and passed to with_span/3 or start_span/3 : Tracer = opentelemetry : get_tracer ( pgo ) , otel_tracer : with_span ( Tracer , &lt;&lt; &quot;pgo:query/3&quot; &gt;&gt; , fun ( ) -&gt; . . . end ) . A Tracer variable can be passed through your Application's calls so get_tracer only has to be called once, it is safe to store it in the state of a gen_server and to pass across process boundaries. If the application does not have a start/2 there may be another function that is always called before the library would create any spans. For example, the Elli middleware for OpenTelemetry instrumentation registers the Tracer during Elli startup: handle_event ( elli_startup , _ Args , _ Config ) -&gt; _ = opentelemetry : register_application_tracer ( opentelemetry_elli ) , ok ; When there is no startup of any kind to hook into in the library itself it should export a function register_application_tracer/0 to be used by any application that depends on it to do the registration: - module ( mylib ) . - export ( [ register_tracer / 0 ] ) . register_tracer ( ) -&gt; _ = opentelemetry : register_application_tracer ( mylib ) , ok . Not registering does not cause any issues or crashes, OpenTelemetry simply will fallback to the default Tracer if get_tracer/1 is called with a name that is not registered. Helper Macros for Application Tracers When register_application_tracer/1 is used to register a Tracer there are both Erlang and Elixir macros that make use of the current module's name to lookup the Tracer for you and can be used for Trace and Span operations: - include_lib ( &quot;opentelemetry_api/include/otel_tracer.hrl&quot; ) . some_fun ( ) -&gt; ? with_span ( &lt;&lt; &quot;some_fun/0&quot; &gt;&gt; , \#{ } , fun ( _ SpanCtx ) -&gt; . . . ? set_attribute ( &lt;&lt; &quot;key&quot; &gt;&gt; , &lt;&lt; &quot;value&quot; &gt;&gt; ) , . . . end ) , require OpenTelemetry.Tracer require OpenTelemetry.Span def some_fun ( ) do OpenTelemetry.Tracer . with_span &quot;some-span&quot; do ... OpenTelemetry.Span . set_attribute ( &quot;key&quot; , &quot;value&quot; ) ... end end Including the OpenTelemetry SDK For traces to actually be tracked, propagated and exported, the opentelemetry Application must be included as a dependency of your project, likely as part of a Release and not as a dependency of an individual Application within the Release. See the Using section of the OpenTelemetry-Erlang repository for details. Exporters Exporters can be found as separate Applications on Github under the OpenTelemetry Beam Organization . Zipkin OpenTelemetry Collector HTTP Integrations Elli Database Client Integration Ecto","ref":"readme.html#use","title":"Erlang/Elixir OpenTelemetry API - Use","type":"extras"},{"doc":"See the contributing file .","ref":"readme.html#contributing","title":"Erlang/Elixir OpenTelemetry API - Contributing","type":"extras"}]