searchNodes=[{"doc":"Yet another HTTP client.FeaturesExtensible via request and response middlewaresAutomatic decompression (via decompress/2)Automatic body encoding/decoding (via encode_request_body/2, decode_response_body/2)Examplesiex&gt; Requests.get!(&quot;https://api.github.com/repos/elixir-lang/elixir&quot;).body[&quot;description&quot;] &quot;Elixir is a dynamic, functional language designed for building scalable and maintainable applications&quot;","ref":"Requests.html","title":"Requests","type":"module"},{"doc":"Decodes the response body based on the content-type header.Options:json_decoder - if set, used on the &quot;application/json*&quot; content type. Defaults to &amp;Jason.decode/1 if jason dependency is installed.:csv_decoder - if set, used on the &quot;text/csv*&quot; content type. Defaults to &amp;NimbleCSV.RFC4180.parse_string(&amp;1, skip_headers: false) if nimble_csv dependency is installed.","ref":"Requests.html#decode_response_body/2","title":"Requests.decode_response_body/2","type":"function"},{"doc":"Decompresses the response body.","ref":"Requests.html#decompress/2","title":"Requests.decompress/2","type":"function"},{"doc":"Adds default request headers.Currently these headers are added:&quot;user-agent&quot; - &quot;requests/0.1.0-dev&quot;&quot;accept-encoding&quot; - &quot;gzip&quot;","ref":"Requests.html#default_headers/2","title":"Requests.default_headers/2","type":"function"},{"doc":"Encodes the reqeuest body based on the content-type header.Options:json_encoder - if set, used on the &quot;application/json*&quot; content type. Defaults to &amp;Jason.encode_to_iodata!/1 if jason dependency is installed.:csv_encoder - if set, used on the &quot;text/csv*&quot; content type. Defaults to &amp;NimbleCSV.RFC4180.dump_to_iodata/1 if nimble_csv dependency is installed.","ref":"Requests.html#encode_request_body/2","title":"Requests.encode_request_body/2","type":"function"},{"doc":"Makes a GET request.See request/4 for possible options.","ref":"Requests.html#get/2","title":"Requests.get/2","type":"function"},{"doc":"See get/2.","ref":"Requests.html#get!/2","title":"Requests.get!/2","type":"function"},{"doc":"Normalizes request headers.Turns atom header names into strings, e.g.: :user_agent becomes &quot;user-agent&quot;. Non-atom names are returned as is.","ref":"Requests.html#normalize_request_headers/2","title":"Requests.normalize_request_headers/2","type":"function"},{"doc":"Makes a POST request.See request/4 for possible options.","ref":"Requests.html#post/3","title":"Requests.post/3","type":"function"},{"doc":"See post/3.","ref":"Requests.html#post!/3","title":"Requests.post!/3","type":"function"},{"doc":"Makes a HTTP request.Options::headers - list of request headers, defaults to [].:finch - name of the Finch pool to use, defaults to Requests.Finch that is started with the default options.:request_middleware - list of middleware to run the request through, defaults to [].:default_request_middleware - if true (default), prepends the following functions to the request middleware list:normalize_request_headers/2default_headers/2encode_request_body/2:response_middleware - list of middleware to run the response through, defaults to [].:default_response_middleware - if true (default), prepends the following functions to the response middleware list:decompress/2decode_response_body/2The opts keywords list is passed to each middleware.Request middlewareA request middleware is a function that two arguments and returns a possibly updated request:a Finch.Request structan opts keywords listAn example is normalize_request_headers/2.Response middlewareA response middleware is a function that two arguments and returns a possibly updated response:a Finch.Response structan opts keywords listAn example is decompress/2.","ref":"Requests.html#request/4","title":"Requests.request/4","type":"function"}]