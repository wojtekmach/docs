searchNodes=[{"doc":"telemetry allows you to invoke certain functions whenever a particular event is emitted. For more information see the documentation for attach/4 , attach_many/4 and execute/2 .","ref":"telemetry.html","title":"telemetry","type":"module"},{"doc":"","ref":"telemetry.html#assert_event_name/1","title":"telemetry.assert_event_name/1","type":"function"},{"doc":"","ref":"telemetry.html#assert_event_names/1","title":"telemetry.assert_event_names/1","type":"function"},{"doc":"","ref":"telemetry.html#assert_event_prefix/1","title":"telemetry.assert_event_prefix/1","type":"function"},{"doc":"Attaches the handler to the event. handler_id must be unique, if another handler with the same ID already exists the {error, already_exists} tuple is returned. See execute/3 to learn how the handlers are invoked. Note: due to how anonymous functions are implemented in the Erlang VM, it is best to use function captures (i.e. fun mod:fun/4 in Erlang or &amp;Mod.fun/4 in Elixir) as event handlers to achieve maximum performance. In other words, avoid using literal anonymous functions ( fun(...) -&gt; ... end or fn ... -&gt; ... end ) or local function captures ( fun handle_event/4 or &amp;handle_event/4 ) as event handlers. All the handlers are executed by the process dispatching event. If the function fails (raises, exits or throws) then the handler is removed. Note that you should not rely on the order in which handlers are invoked.","ref":"telemetry.html#attach/4","title":"telemetry.attach/4","type":"function"},{"doc":"Attaches the handler to many events. The handler will be invoked whenever any of the events in the event_names list is emitted. Note that failure of the handler on any of these invocations will detach it from all the events in event_name (the same applies to manual detaching using detach/1 ). Note: due to how anonymous functions are implemented in the Erlang VM, it is best to use function captures (i.e. fun mod:fun/4 in Erlang or &amp;Mod.fun/4 in Elixir) as event handlers to achieve maximum performance. In other words, avoid using literal anonymous functions ( fun(...) -&gt; ... end or fn ... -&gt; ... end ) or local function captures ( fun handle_event/4 or &amp;handle_event/4 ) as event handlers. All the handlers are executed by the process dispatching event. If the function fails (raises, exits or throws) then the handler is removed. Note that you should not rely on the order in which handlers are invoked.","ref":"telemetry.html#attach_many/4","title":"telemetry.attach_many/4","type":"function"},{"doc":"Removes the existing handler. If the handler with given ID doesn't exist, {error, not_found} is returned.","ref":"telemetry.html#detach/1","title":"telemetry.detach/1","type":"function"},{"doc":"Equivalent to execute(EventName, Measurements, \#{}) .","ref":"telemetry.html#execute/2","title":"telemetry.execute/2","type":"function"},{"doc":"Emits the event, invoking handlers attached to it. When the event is emitted, the handler function provided to attach/4 is called with four arguments: the event name the map of measurements the map of event metadata the handler configuration given to attach/4 Best practices and conventions: While you are able to emit messages of any event_name structure, it is recommended that you follow the the guidelines laid out in span/3 if you are capturing start/stop events.","ref":"telemetry.html#execute/3","title":"telemetry.execute/3","type":"function"},{"doc":"Returns all handlers attached to events with given prefix. Handlers attached to many events at once using attach_many/4 will be listed once for each event they're attached to. Note that you can list all handlers by feeding this function an empty list.","ref":"telemetry.html#list_handlers/1","title":"telemetry.list_handlers/1","type":"function"},{"doc":"","ref":"telemetry.html#merge_ctx/2","title":"telemetry.merge_ctx/2","type":"function"},{"doc":"Emit start, and stop/exception events, invoking the handlers attached to each. When this function is called, 2 events will be emitted via execute/3 . Those events will be one of the following pairs: EventPrefix ++ [start] and EventPrefix ++ [stop] EventPrefix ++ [start] and EventPrefix ++ [exception] However, note that in case the current processes crashes due to an exit signal of another process, then none or only part of those events would be emitted. Below is a breakdown of the measurements and metadata associated with each individual event. When providing StartMetadata and StopMetadata , these values will be sent independently to start and stop events. If an exception occurs, exception metadata will be merged onto the StartMetadata . In general, StopMetadata should only provide values that are additive to StartMetadata so that handlers, such as those used for metrics, can rely entirely on the stop event. A default span context is added to event metadata under the telemetry_span_context key if none is provided by the user in the StartMetadata . This context is useful for tracing libraries to identify unique executions of span events within a process to match start, stop, and exception events. Users should ensure this value is unique within the context of a process at a minimum if overriding this key and that the same value is provided to both StartMetadata and StopMetadata . For telemetry events denoting the start of a larger event, the following data is provided: Event: EventPrefix ++ [ start ] Measurements: \#{ % The current system time in native units from % calling: erlang:system_time() system_time =&gt; integer ( ) } Metadata: \#{ telemetry_span_context =&gt; term ( ) , % User defined metadata . . . } For telemetry events denoting the stop of a larger event, the following data is provided: Event: EventPrefix ++ [ stop ] Measurements: \#{ % The current monotonic time minus the start monotonic time in native units % by calling: erlang:monotonic_time() - start_monotonic_time duration =&gt; integer ( ) } Metadata: \#{ % An optional error field if the stop event is the result of an error % but not necessarily an exception. Additional user defined metadata can % also be added here. error =&gt; term ( ) , telemetry_span_context =&gt; term ( ) , . . . } For telemetry events denoting an exception of a larger event, the following data is provided: Event: EventPrefix ++ [ exception ] Measurements: \#{ % The current monotonic time minus the start monotonic time in native units % derived by calling: erlang:monotonic_time() - start_monotonic_time duration =&gt; integer ( ) } Metadata: \#{ kind =&gt; throw | error | exit , reason =&gt; term ( ) , stacktrace =&gt; list ( ) , telemetry_span_context =&gt; term ( ) , % User defined metadata from the start event . . . }","ref":"telemetry.html#span/3","title":"telemetry.span/3","type":"function"},{"doc":"","ref":"telemetry.html#t:event_measurements/0","title":"telemetry.event_measurements/0","type":"type"},{"doc":"","ref":"telemetry.html#t:event_metadata/0","title":"telemetry.event_metadata/0","type":"type"},{"doc":"","ref":"telemetry.html#t:event_name/0","title":"telemetry.event_name/0","type":"type"},{"doc":"","ref":"telemetry.html#t:event_prefix/0","title":"telemetry.event_prefix/0","type":"type"},{"doc":"","ref":"telemetry.html#t:event_value/0","title":"telemetry.event_value/0","type":"type"},{"doc":"","ref":"telemetry.html#t:handler/0","title":"telemetry.handler/0","type":"type"},{"doc":"","ref":"telemetry.html#t:handler_config/0","title":"telemetry.handler_config/0","type":"type"},{"doc":"","ref":"telemetry.html#t:handler_function/0","title":"telemetry.handler_function/0","type":"type"},{"doc":"","ref":"telemetry.html#t:handler_id/0","title":"telemetry.handler_id/0","type":"type"},{"doc":"","ref":"telemetry.html#t:span_function/0","title":"telemetry.span_function/0","type":"type"},{"doc":"","ref":"telemetry.html#t:span_result/0","title":"telemetry.span_result/0","type":"type"},{"doc":"Telemetry Documentation Telemetry is a dynamic dispatching library for metrics and instrumentations. It is lightweight, small and can be used in any Erlang or Elixir project. In a nutshell, you register a custom module and function to be invoked for certain events, which are executed whenever there is such event. Event name is a list of atoms. Each event is composed of a numeric value and can have metadata attached to it. Let's see an example. Imagine that you have a web application and you'd like to log latency and response status for each incoming request. With Telemetry, you can build a module which does exactly that whenever a response is sent. The first step is to execute a measurement. In Elixir: :telemetry . execute ( [ :web , :request , :done ] , %{ latency : latency } , %{ request_path : path , status_code : status } ) In Erlang: telemetry : execute ( [ web , request , done ] , \#{ latency =&gt; Latency } , \#{ request_path =&gt; Path , status_code =&gt; Status } ) Then you can create a module to be invoked whenever the event happens. In Elixir: defmodule LogResponseHandler do require Logger def handle_event ( [ :web , :request , :done ] , measurements , metadata , _config ) do Logger . info ( &quot;[ \#{ metadata . request_path } ] \#{ metadata . status_code } sent in \#{ measurements . latency } &quot; ) end end In Erlang: - module ( log_response_handler ) . - include_lib ( &quot;kernel/include/logger.hrl&quot; ) handle_event ( [ web , request , done ] , \#{ latency := Latency } , \#{ request_path := Path , status_code := Status } , _ Config ) -&gt; ? LOG_INFO ( &quot;[ ~s ] ~p sent in ~p &quot; , [ Path , Status , Latency ] ) . Important note: The handle_event callback of each handler is invoked synchronously on each telemetry:execute call. Therefore, it is extremely important to avoid blocking operations. If you need to perform any action that it is not immediate, consider offloading the work to a separate process (or a pool of processes) by sending a message. Finally, all you need to do is to attach the module to the executed event. In Elixir: :ok = :telemetry . attach ( # unique handler id &quot;log-response-handler&quot; , [ :web , :request , :done ] , &amp; LogResponseHandler . handle_event / 4 , nil ) In Erlang: ok = telemetry : attach ( %% unique handler id &lt;&lt; &quot;log-response-handler&quot; &gt;&gt; , [ web , request , done ] , fun log_response_handler : handle_event / 4 , [ ] ) You might think that it isn't very useful, because you could just as well write a log statement instead of Telemetry.execute/3 call - and you would be right! But now imagine that each Elixir library would publish its own set of events with information useful for introspection. Currently each library rolls their own instrumentation layer - Telemetry aims to provide a single interface for these use cases across the whole ecosystem. In order to provide uniform events that capture the start and end of discrete events, it is recommended that you use the telemetry:span/3 call. This function will generate a start event and a stop or exception event depending on whether the provided function successfully executed or raised and error. Under the hood, the telemetry:span/3 function leverages the telemetry:execute/3 function, so all the same usage patterns apply. If an exception does occur, an EventPrefix ++ [exception] event will be emitted and the caught error will be re-raised. The measurements for the EventPrefix ++ [start] event will contain a key called system_time which is derived by calling erlang:system_time() . For EventPrefix ++ [stop] and EventPrefix ++ [exception] events, the measurements will contain a key called duration , whose value is derived by calling erlang:monotonic_time() - StartMonotonicTime . Both system_time and duration represent time as native units. To convert the duration from native units you can use: milliseconds = System . convert_time_unit ( duration , :native , :millisecond ) To create span events, you would do something like so: In Elixir: def process_message ( message ) do start_metadata = %{ message : message } result = :telemetry . span ( [ :worker , :processing ] , start_metadata , fn -&gt; result = # Process the message { result , %{ metadata : &quot;Information related to the processing of the message&quot; } } end ) end In Erlang: process_message ( Message ) -&gt; StartMetadata = \#{ message =&gt; Message } , Result = telemetry : span ( [ worker , processing ] , StartMetadata , fun ( ) -&gt; Result = % Process the message { Result , \#{ metadata =&gt; &quot;Information related to the processing of the message&quot; } } end ) . To then attach to the events that telemetry:span/3 emits you would do the following: In Elixir: :ok = :telemetry . attach_many ( &quot;log-response-handler&quot; , [ [ :worker , :processing , :start ] , [ :worker , :processing , :stop ] , [ :worker , :processing , :exception ] ] , &amp; LogResponseHandler . handle_event / 4 , nil ) In Erlang: ok = telemetry : attach_many ( &lt;&lt; &quot;log-response-handler&quot; &gt;&gt; , [ [ worker , processing , start ] , [ worker , processing , stop ] , [ worker , processing , exception ] ] , fun log_response_handler : handle_event / 4 , [ ] ) With the following event handler module defined: In Elixir: defmodule LogResponseHandler do require Logger def handle_event ( event , measurements , metadata , _config ) do Logger . info ( &quot;Event: \#{ inspect ( event ) } &quot; ) Logger . info ( &quot;Measurements: \#{ inspect ( measurements ) } &quot; ) Logger . info ( &quot;Metadata: \#{ inspect ( metadata ) } &quot; ) end end In Erlang: - module ( log_response_handler ) . - include_lib ( &quot;kernel/include/logger.hrl&quot; ) handle_event ( Event , Measurements , Metadata , _ Config ) -&gt; ? LOG_INFO ( &quot;Event: ~p &quot; , [ Event ] ) , ? LOG_INFO ( &quot;Measurements: ~p &quot; , [ Measurements ] ) , ? LOG_INFO ( &quot;Metadata: ~p &quot; , [ Metadata ] ) . See the documentation for more details.","ref":"readme.html","title":"Telemetry","type":"extras"},{"doc":"Telemetry is available on Hex . To install, just add it to your dependencies in mix.exs : defp deps ( ) do [ { :telemetry , &quot;~&gt; 0.4&quot; } ] end or rebar.config : { deps , [ { telemetry , &quot;~&gt; 0.4&quot; } ] } .","ref":"readme.html#installation","title":"Telemetry - Installation","type":"extras"},{"doc":"Telemetry is copyright (c) 2018 Chris McCord and Erlang Solutions. Telemetry source code is released under Apache License, Version 2.0. See LICENSE and NOTICE files for more information.","ref":"readme.html#copyright-and-license","title":"Telemetry - Copyright and License","type":"extras"},{"doc":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"This release improves the telemetry:span/3 function by adding the telemetry_span_context metadata to all span events. The new metadata enables correlating span events that belong to the same span. Added Added telemetry_span_context metadata to all events emitted by telemetry:span/3 .","ref":"changelog.html#0-4-3","title":"Changelog - 0.4.3","type":"extras"},{"doc":"Added Added the telemetry:span/3 function.","ref":"changelog.html#0-4-2","title":"Changelog - 0.4.2","type":"extras"},{"doc":"Apart from the code changes listed below, this release includes a few improvements to the documentation. Changed Calls to execute/3 when telemetry application is not started no longer cause an error.","ref":"changelog.html#0-4-1","title":"Changelog - 0.4.1","type":"extras"},{"doc":"A single event value has been replaced by a map of measurements. Now it is up to the consumer of the event to decide what part of the payload is important. This is useful in cases where event indicates that a thing happened but there are many properties describing it. For example, a database query event may include total time, decode time, wait time and other measurements. Changed execute/3 now accepts a map of measurements instead of event value Deprecated :telemetry.execute/3 with an event value in favour of :telemetry.execute/3 with a map of measurements. If the event value is provided, it is put in a map under a :value key and provided as measurements to a handler function.","ref":"changelog.html#0-4-0","title":"Changelog - 0.4.0","type":"extras"},{"doc":"This release marks the conversion from Elixir to Erlang. This is a breaking change, but the benefits largely surpass the drawbacks - Telemetry core can now be used by all projects running on the BEAM, regardless of the language they're written in. Added Added :telemetry.handler/0 , :telemetry.handler_function/0 and :telemetry.handler_config/0 types. Changed The library has been rewritten to Erlang. In Elixir, :telemetry module has to be used in place of Telemetry . In Erlang, telemetry module has to be used in place of 'Elixir.Telemetry' ; :telemetry.list_handlers/1 returns a list of maps (of type :telemetry.handler/0 ) instead of a list of tuples; :telemetry.attach/4 and :telemetry.attach_many/4 replaced the 5-arity versions and now accept an anonymous function for the handler function instead of a module and function name. Removed Removed :telemetry.attach/5 and :telemetry.attach_many/5 - 4-arity versions need to be used now instead.","ref":"changelog.html#0-3-0","title":"Changelog - 0.3.0","type":"extras"},{"doc":"The main point of this release is to mark base Telemetry API as stable, so that other libraries can rely on it without worrying about backwards compatibility. Removed Removed Telemetry.attach/4 and Telemetry.attach_many/4 - the handler config is now required. Fixed Fixed type specs which were producing Dialyzer errors.","ref":"changelog.html#0-2-0","title":"Changelog - 0.2.0","type":"extras"},{"doc":"First release of Telemetry library.","ref":"changelog.html#0-1-0","title":"Changelog - 0.1.0","type":"extras"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"Copyright (c) 2018, Chris McCord and Erlang Solutions Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"notice.html","title":"NOTICE","type":"extras"}]